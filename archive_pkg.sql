CREATE OR REPLACE PACKAGE ARCHIVE_PCG AS

    PROCEDURE ARCHIVE_ROWS(BORROWER_ID IN NUMBER, CREDIT_ID IN NUMBER);

END ARCHIVE_PCG;


CREATE OR REPLACE PACKAGE BODY ARCHIVE_PCG AS

    --PRIVATE

    --GET BORROWER ROW BY GIVEN ID
    FUNCTION GET_BORROWER(BORROWER_ID IN NUMBER) RETURN BCP_BORROWER%ROWTYPE
        IS
        BORROWER_ROW BCP_BORROWER%ROWTYPE;
    BEGIN
        SELECT * INTO BORROWER_ROW FROM BCP_BORROWER BB WHERE BB.OID = BORROWER_ID;
        RETURN BORROWER_ROW;
    END GET_BORROWER;
    --------------------------------------------------------------------------------------------

    --GET CREDIT ROW BY GIVEN ID
    FUNCTION GET_CREDIT(CREDIT_ID IN NUMBER) RETURN BCP_CREDIT%ROWTYPE
        IS
        CREDIT_ROW BCP_CREDIT%ROWTYPE;
    BEGIN
        SELECT * INTO CREDIT_ROW FROM BCP_CREDIT BC WHERE BC.OID = CREDIT_ID;
        RETURN CREDIT_ROW;
    END GET_CREDIT;

    -----------------------------------------------------------------------------------------------
    FUNCTION COPY_ROWS_TO_ARCHIVE_TABLES(BORROWER_ID IN NUMBER, CREDIT_ID IN NUMBER) RETURN BOOLEAN
        IS
        BORROWER_ROW      BCP_BORROWER%rowtype;
        CREDIT_ROW        BCP_CREDIT%rowtype;
        BORROWER_ARCH_ROW BCP_BORROWER_ARCHIVE%rowtype;
        CREDIT_ARCH_ROW   BCP_CREDIT_ARCHIVE%rowtype;
        -----------------------------------------------
        BBA_OID           BORROWER_ARCH_ROW.OID%TYPE;
        BCA_OID           CREDIT_ARCH_ROW.OID%TYPE;
    BEGIN
        BORROWER_ROW := GET_BORROWER(BORROWER_ID);
        CREDIT_ROW := GET_CREDIT(CREDIT_ID);

        --AND (CREDIT_ROW IS NOT NULL)

        BORROWER_ARCH_ROW := BORROWER_ROW;
        CREDIT_ARCH_ROW := CREDIT_ROW;

        INSERT INTO BCP_BORROWER_ARCHIVE
        VALUES BORROWER_ROW RETURNING BCP_BORROWER_ARCHIVE.OID INTO BBA_OID;

        INSERT INTO BCP_CREDIT_ARCHIVE
        VALUES CREDIT_ROW RETURNING BCP_CREDIT_ARCHIVE.OID INTO BCA_OID;

        --CHECK FOR CORRECT INSERTION
        IF BBA_OID > 0 AND BCA_OID > 0 THEN
            RETURN TRUE;
        END IF;

        RETURN FALSE;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN FALSE;

    END COPY_ROWS_TO_ARCHIVE_TABLES;

    -----------------------------------------------------------------------------------------------

    --DELETE ROWS FROM MAIN TABLES
    PROCEDURE DELETE_ROWS_FROM_MAIN_TABLES(BORROWER_ID IN NUMBER, CREDIT_ID IN NUMBER)
        IS
    BEGIN
        DELETE FROM BCP_BORROWER BB WHERE BB.OID = BORROWER_ID;
        DELETE FROM BCP_CREDIT BC WHERE BC.OID = CREDIT_ID;
    END DELETE_ROWS_FROM_MAIN_TABLES;

    -----------------------------------------------------------------------------------------------

    --PUBLIC PROCEDURE
    PROCEDURE ARCHIVE_ROWS(BORROWER_ID IN NUMBER, CREDIT_ID IN NUMBER) IS
        BORROWER_ROW BCP_BORROWER%rowtype;
    BEGIN
        IF COPY_ROWS_TO_ARCHIVE_TABLES(BORROWER_ID, CREDIT_ID) THEN
            DELETE_ROWS_FROM_MAIN_TABLES(BORROWER_ID, CREDIT_ID);
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.put_line('Error occurred');
    END ARCHIVE_ROWS;

    -----------------------------------------------------------------------------------------------

END ARCHIVE_PCG;


